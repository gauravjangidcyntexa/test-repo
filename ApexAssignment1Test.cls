@isTest public class ApexAssignment1Test { @isTest static void testIsPalindrome() { System.assert(ApexAssignment1.isPalindrome('level'));System.assert(!ApexAssignment1.isPalindrome('hello'));}@isTeststaticvoidtestSumOfDigits(){System.assertEquals(10,ApexAssignment1.sumOfDigits(1234));System.assertNotEquals(15,ApexAssignment1.sumOfDigits(1234));}@isTeststaticvoidtestReverseList(){List<Integer>inputList=newList<Integer>{1,2,3,4,5};List<Integer>reversedList=ApexAssignment1.reverseList(inputList);System.assertEquals(newList<Integer>{5,4,3,2,1},reversedList);List<Integer>emptyList=newList<Integer>();List<Integer>reversedEmptyList=ApexAssignment1.reverseList(emptyList);System.assertEquals(newList<Integer>(),reversedEmptyList);}@isTeststaticvoidtestMap2DList(){List<List<Integer>>inputList=newList<List<Integer>>{newList<Integer>{1,2,3},newList<Integer>{4,5,6}};Map<Integer,List<Integer>>resultMap=ApexAssignment1.map2DList(inputList);System.assertEquals(newMap<Integer,List<Integer>>{0=>newList<Integer>{1,2,3},1=>newList<Integer>{4,5,6}},resultMap);List<List<Integer>>emptyList=newList<List<Integer>>();Map<Integer,List<Integer>>resultMapEmpty=ApexAssignment1.map2DList(emptyList);System.assertEquals(newMap<Integer,List<Integer>>(),resultMapEmpty);}@isTeststaticvoidtestRemoveDuplicatesAndSort(){List<List<String>>inputList=newList<List<String>>{newList<String>{'a','b','a','v','c'},newList<String>{'x','x','y','c','q'},newList<String>{'m','b','h','j','m'},newList<String>{'u','k','j','u'}};List<List<String>>resultList=ApexAssignment1.removeDuplicatesAndSort(inputList);System.assertEquals(newList<List<String>>{newList<String>{'a','b','c','v'},newList<String>{'c','q','x','y'},newList<String>{'b','h','j','m'},newList<String>{'j','k','u'}},resultList);List<List<String>>emptyList=newList<List<String>>();List<List<String>>resultListEmpty=ApexAssignment1.removeDuplicatesAndSort(emptyList);System.assertEquals(newList<List<String>>(),resultListEmpty);}@isTeststaticvoidtestRotateClockwise(){List<Integer>inputList=newList<Integer>{1,2,3,4,5};List<Integer>rotatedList=ApexAssignment1.rotateClockwise(inputList,2);System.assertEquals(newList<Integer>{4,5,1,2,3},rotatedList);List<Integer>emptyList=newList<Integer>();List<Integer>rotatedEmptyList=ApexAssignment1.rotateClockwise(emptyList,3);System.assertEquals(newList<Integer>(),rotatedEmptyList);}@isTeststaticvoidtestRotateAntiClockwise(){List<Integer>inputList=newList<Integer>{1,2,3,4,5};List<Integer>rotatedList=ApexAssignment1.rotateAntiClockwise(inputList,2);System.assertEquals(newList<Integer>{3,4,5,1,2},rotatedList);List<Integer>emptyList=newList<Integer>();List<Integer>rotatedEmptyList=ApexAssignment1.rotateAntiClockwise(emptyList,3);System.assertEquals(newList<Integer>(),rotatedEmptyList);}@isTeststaticvoidtestFindLeaders(){List<Integer>inputList=newList<Integer>{149,1,3,248,2,8,70,5};List<Integer>leaders=ApexAssignment1.findLeaders(inputList);System.assertEquals(newList<Integer>{248,70,5},leaders);List<Integer>emptyList=newList<Integer>();List<Integer>leadersEmpty=ApexAssignment1.findLeaders(emptyList);System.assertEquals(newList<Integer>(),leadersEmpty);}}
